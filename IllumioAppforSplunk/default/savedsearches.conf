[Illumio_Auditable_Events]
enableSched = 1
cron_schedule = */15 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
auto_summarize = 1
auto_summarize.cron_schedule = 55 0 * * 0
auto_summarize.dispatch.earliest_time = -1w
auto_summarize.dispatch.latest_time = now
search = | tstats `summariesonly` values(Audit.pce_fqdn) AS pce_fqdn, values(Audit.org_id) AS org_id, values(Audit.severity) AS severity, values(Audit.object) AS object, values(Audit.object_category) AS object_category, values(Audit.object_id) AS object_id, values(Audit.user) AS user FROM datamodel=Illumio.Audit WHERE Audit.category=auditable BY _time, Audit.timestamp, Audit.href, Audit.event_type \
    | rename Audit.timestamp AS Timestamp, Audit.event_type AS event_type

[Illumio_PortScan_Traffic]
enableSched = 1
cron_schedule = */20 * * * *
dispatch.earliest_time = -25m
dispatch.latest_time = -5m
auto_summarize = 1
auto_summarize.cron_schedule = 55 1 * * 0
auto_summarize.dispatch.earliest_time = -1w
auto_summarize.dispatch.latest_time = now
search = | tstats `summariesonly` values(Traffic.pce_fqdn) AS pce_fqdn, values(Traffic.org_id) AS org_id, dc(Traffic.dest_port) AS ports_scanned, values(Traffic.src_host) AS src_host, values(Traffic.src_href) AS src_href, values(Traffic.dest_host) AS dest_host, values(Traffic.dest_href) AS dest_href FROM datamodel=Illumio.Traffic WHERE Traffic.direction=inbound BY _time, Traffic.timestamp, Traffic.src_ip, Traffic.dest_ip, Traffic.network \
    | rename Traffic.timestamp AS Timestamp, Traffic.src_ip AS src_ip, Traffic.dest_ip AS dest_ip, Traffic.network AS network

[Illumio_PortScan]
search = | savedsearch Illumio_PortScan_Traffic \
    | search pce_fqdn="$pce_fqdn$" org_id="$org_id$" \
    | eval Timestamp=strptime('Timestamp',"%FT%T%Z") \
    | bin Timestamp [| inputlookup illumio_port_scan_settings_lookup WHERE pce_fqdn="$pce_fqdn$" org_id="$org_id$" | eval result = "span=" . interval . "s" | return $result] \
    | stats sum(ports_scanned) AS ports_scanned, latest(pce_fqdn) AS pce_fqdn, latest(org_id) AS org_id, latest(src_ip) AS src_ip, latest(dest_ip) AS dest_ip, latest(src_host) AS src_host, latest(src_href) AS src_href, latest(dest_host) AS dest_host, latest(dest_href) AS dest_href BY Timestamp \
    | lookup illumio_port_scan_settings_lookup pce_fqdn org_id OUTPUT threshold allowed_ips \
    | where ports_scanned > threshold AND NOT IN(allowed_ips, src_ip)

[Illumio_Firewall_Tampering]
enableSched = 1
cron_schedule = */15 * * * *
dispatch.earliest_time = -20m
dispatch.latest_time = -5m
auto_summarize = 1
auto_summarize.cron_schedule = 55 2 * * 0
auto_summarize.dispatch.earliest_time = -1w
auto_summarize.dispatch.latest_time = now
search = | tstats `summariesonly` values(Audit.event_type) AS event_type, values(Audit.object) AS workload_hostname FROM datamodel=Illumio.Audit WHERE Audit.event_type="agent.tampering" BY _time, Audit.timestamp, Audit.href, Audit.pce_fqdn, Audit.org_id, Audit.object_id \
    | rename Audit.Timestamp AS Timestamp, Audit.pce_fqdn AS pce_fqdn, Audit.org_id AS org_id, Audit.object_id AS ven_href

[Illumio_Check_PCE_Collector_Data]
enableSched = 0
cron_schedule = */5 * * * *
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 1
alert_condition = search count = 0
counttype = custom
description = To trigger an alert if PCE data is not received in last five minutes
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","measurement{@avg}"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
search = `illumio_get_index` sourcetype="illumio:pce*" | stats count

[Illumio_VEN_Inactivity_Timer_Alert]
enableSched = 0
cron_schedule = */5 * * * *
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
quantity = 0
relation = greater than
search = | tstats `summariesonly` values(Audit.event_type) as event_type, values(Audit.href) as href from datamodel=Illumio.Audit WHERE Audit.event_type="agent.suspend" BY Audit.timestamp

# 3.2.3 backwards compatability
[Illumio_Auditable_Events_backward_compatible]
auto_summarize.dispatch.earliest_time = -1mon@h
dispatch.earliest_time = -15m
dispatch.latest_time = -5m
cron_schedule = */5,15,25,35,45,55 * * * *
enableSched = 1
search = | tstats `summariesonly` latest(_time) as _time, values(Illumio.category) as category, values(host) as host, values(Illumio.event_type) as event_type, values(Illumio.leader_fqdn) as leader_fqdn from datamodel=Illumio where nodename=Illumio.Illumio_PCE by Illumio.timestamp Illumio.pce_fqdn | rename Illumio.pce_fqdn as pce_fqdn | search (category = "auditable" OR category="system_events") | fields category, _time, host, event_type, pce_fqdn, leader_fqdn

[Illumio_PortScan_backward_compatible]
cron_schedule = */5 * * * *
enableSched = 1
realtime_schedule = 0
action.summary_index = 1
dispatch.earliest_time = -10m
dispatch.latest_time = -5m
search = | tstats `summariesonly` allow_old_summaries=true dc(Illumio.dst_port) as port_count, values(Illumio.workload_uuid) as workload_uuid, values(host) as host, values(Illumio.pce_fqdn) as fqdn, values(Illumio.leader_fqdn) as leader_fqdn from datamodel=Illumio where nodename=Illumio.Illumio_PCE_Collector Illumio.dir="I" [| inputlookup illumio_portscan_details_lookup | eval allowed = split(allowed_ip,",") | eval allowed_ip = "(Illumio.src_ip!=" + mvjoin(allowed," AND Illumio.src_ip!=") + ")" | return $allowed_ip] by _time [| inputlookup illumio_portscan_details_lookup | table interval | head 1 | eval result="span="+interval + "s," | return $result ] Illumio.dst_ip, Illumio.src_ip, Illumio.src_href, Illumio.dst_href | where [| inputlookup illumio_portscan_details_lookup | table port_scan | head 1 | stats count first(port_scan) as port_scan | eval result="port_count >= " + if(count>0,port_scan,"0")  | return $result ] | stats count, values(host) as host, values(fqdn) as fqdn, values(leader_fqdn) as leader_fqdn by _time, Illumio.dst_ip, Illumio.src_ip, Illumio.src_href, Illumio.dst_href | rename _time as time

[Illumio_Firewall_Tempering_backward_compatible]
auto_summarize.dispatch.earliest_time = -1mon@h
dispatch.earliest_time = -15m
dispatch.latest_time = -5m
cron_schedule = */10,20,30,40,50 * * * *
enableSched = 1
search = | tstats `summariesonly` latest(_time) as _time, values(Illumio.event_type) as event_type, values(Illumio.leader_fqdn) as leader_fqdn, values(Illumio.created_hostname) as created_hostname from datamodel=Illumio where nodename=Illumio.Illumio_PCE by Illumio.timestamp Illumio.pce_fqdn | rename Illumio.pce_fqdn as pce_fqdn | search event_type="agent.tampering" | fields event_type, _time, pce_fqdn, created_hostname, leader_fqdn

[Illumio_Workload_Mapping_backward_compatible]
run_on_startup = true
cron_schedule = 0 0 * * * 
description = Populates label and workload data into illumio_workload_mapping kvstore
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce:metadata" (illumio_type="illumio:pce:workload" OR illumio_type="illumio:pce:label") | table illumio_type labels{}.href value href key hostname source os_id _time | rename key as type | rex field=href "orgs\/\d+\/workloads\/(?<uuid>\S+)" | eval hostname_uuid = hostname + ":" + uuid + ":" + os_id | eval href=if(isnotnull('labels{}.href'),'labels{}.href',if(isnotnull(href),href,"")) | where href!="" | stats values(hostname_uuid) as hostname_uuid values(value) as value values(type) as type latest(_time) as _time by source href | mvexpand hostname_uuid | eval hostname=mvindex(split(hostname_uuid,":"),0) | eval workload_uuid=mvindex(split(hostname_uuid,":"),1) | eval os_id=mvindex(split(hostname_uuid,":"),2) | dedup workload_uuid value href type | eval comb = mvzip(value, type, "-sep-") | mvexpand comb | makemv comb delim="-sep-" | eval label=mvindex(comb, 0) | eval type=mvindex(comb, 1) | eval type_label=type+":"+label | eval key=workload_uuid+"-"+type | eval timestamp = _time | table key workload_uuid href label type type_label hostname os_id timestamp | append [| inputlookup illumio_workload_mapping_lookup | eval key=workload_uuid+"-"+type | fillnull timestamp] | dedup key | eval last_month = relative_time(now(),"-30d") | where timestamp > last_month | table key workload_uuid href label type type_label hostname os_id timestamp | outputlookup illumio_workload_mapping_lookup

[Illumio_IP_Lists_Mapping_backward_compatible]
run_on_startup = true
cron_schedule = 0 0 * * * 
description = Populates Name and href into illumio_ip_lists_mapping kvstore
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce:metadata" (illumio_type="illumio:pce:ip_lists") | eval key = href | table key, name, href | outputlookup illumio_ip_lists_mapping_lookup append=T key_field=key

[Illumio_Services_Mapping_backward_compatible]
run_on_startup = true
cron_schedule = 0 0 * * * 
description = Populates Name and href into illumio_services_mapping kvstore
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce:metadata" (illumio_type="illumio:pce:services") | eval key = href | table key, name, href | outputlookup illumio_services_mapping_lookup append=T key_field=key

[Illumio_Portscan_Details_backward_compatible]
run_on_startup = true
cron_schedule = */5 * * * *
description = Populates port scan details into static lookup file
dispatch.earliest_time = -1h
dispatch.latest_time = now
enableSched = 1
search=`illumio_get_index` sourcetype="illumio:pce:metadata" illumio_type="illumio:pce:ps_details" | dedup pce_url | inputlookup illumio_portscan_details_lookup append=T | dedup pce_url | table pce_url port_scan interval allowed_ip | outputlookup illumio_portscan_details_lookup

[Illumio_Host_Details_backward_compatible]
run_on_startup = true
cron_schedule = 1-59/5 * * * *
description = Populates host details into static lookup file
dispatch.earliest_time = -10m
dispatch.latest_time = -5m
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce:metadata" illumio_type="illumio:pce:health" | dedup fqdn | rename nodes{}.hostname as hostname | mvexpand hostname | eval hostname = lower(hostname) | append [| inputlookup illumio_host_details_lookup | eval hostname = lower(hostname)] | dedup fqdn, hostname | eval _key = hostname + "_" + fqdn | table _key, hostname, fqdn, leader_fqdn | outputlookup illumio_host_details_lookup

[Illumio_Host_Details_S3_backward_compatible]
disabled = 1
run_on_startup = true
cron_schedule = 1-59/5 * * * *
description = Populates host details into static lookup file
dispatch.earliest_time = -10m
dispatch.latest_time = -5m
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce" OR sourcetype="illumio:pce:collector" | eval hostname="-" | rename pce_fqdn as fqdn | append [| inputlookup illumio_host_details_lookup] | dedup fqdn, hostname | eval _key = hostname + "_" + fqdn | table _key, hostname, fqdn, leader_fqdn | outputlookup illumio_host_details_lookup

[Illumio_Check_PCE_Collector_Data_backward_compatible]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 1
alert_condition = search count =0
counttype = custom
cron_schedule = */5 * * * *
description = To trigger an alert if PCE data is not received in last five minutes
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","measurement{@avg}"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce:collector" OR sourcetype="illumio:pce" | stats count

[Illumio_VEN_Inactivity_Timer_Alert_backward_compatible]
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */5 * * * *
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = | tstats `summariesonly` latest(_time) as _time values(Illumio.event_type) as event_type, values(Illumio.href) as href from datamodel=Illumio where nodename=Illumio.Illumio_PCE by Illumio.timestamp | search event_type="agent.suspend" | dedup href

[Illumio_hostname_ip_mapping_backward_compatible]
run_on_startup = true
cron_schedule = 0 * * * *
description = Maps Hosname details to IP into the lookup.
dispatch.earliest_time = -60m
dispatch.latest_time = now
enableSched = 1
search = `illumio_get_index` sourcetype="illumio:pce:metadata" illumio_type="illumio:pce:workload" | rename "interfaces{}.address" as ip | stats values(hostname) as hostname by ip fqdn | eval _key= ip + "_" + fqdn | outputlookup illumio_hostname_ip_mapping_lookup append=T key_field=_key

[Illumio_Policy_Provisioning_Alert_backward_compatible]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_Policy_Provisioning
dispatch.earliest_time = -2h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" \
| eval threshold = [| stats count\
| eval count = `illumio_policy_provisioning`\
| eval percent = if(substr(count,-1)="%", "true", "False")\
| join type="left" percent [| search sourcetype="illumio:pce:metadata"  illumio_type="illumio:pce:workload" | stats latest(online_workloads) as workloads_affected\
| eval count = `illumio_policy_provisioning`\
| eval percent = if(substr(count,-1)="%", "true", "False")\
| eval threshold_perc = if(percent="true", rtrim(count,"%"), -1) | eval workloads_affected=round(workloads_affected * threshold_perc / 100) | appendcols [| stats count as workloads_affected ]]\
| appendcols [| stats count as workloads_affected ]\
| search workloads_affected=*\
| eval workloads_affected = if(workloads_affected < 0, `illumio_policy_provisioning`, workloads_affected)\
| return $workloads_affected] | where workloads_affected_after > threshold

[Illumio_Rule_Update_Alert_backward_compatible]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_Rule_Writing_Update
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" `illumio_rule_update`

[Illumio_PCE_Health_Alert_backward_compatible]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_PCE_Health
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" datatype="system_health" `illumio_system_health`

[Illumio_Workload_Labeling_Alert_backward_compatible]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_Workload_Labeling
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" `illumio_workload_labeling`