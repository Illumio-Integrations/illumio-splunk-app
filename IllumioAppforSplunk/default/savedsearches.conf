[Illumio_Auditable_Events]
auto_summarize.dispatch.earliest_time = -1mon@h
dispatch.earliest_time = -15m
dispatch.latest_time = -5m
cron_schedule = */5 * * * *
enableSched = 1
search = | tstats values(Audit.category) AS category FROM datamodel=Illumio.Audit WHERE Audit.category=auditable BY _time Audit.pce_fqdn Audit.event_type | rename Audit.pce_fqdn AS pce_fqdn, Audit.event_type AS event_type

[Illumio_PortScan]
enableSched = 0
realtime_schedule = 0
dispatch.earliest_time = 1
dispatch.latest_time = now
enableSched = 0
search = | inputlookup illumio_port_scan_settings_lookup \
| fields interval threshold allowed_ips \
| fillnull value="-" allowed_ips \
| map search="| tstats dc(Traffic.dest_port) AS port_count FROM datamodel=Illumio.Traffic WHERE Traffic.direction=inbound BY _time Traffic.pce_fqdn Traffic.src_ip Traffic.dest_ip span=$$interval$$s | rename Traffic.pce_fqdn AS pce_fqdn, Traffic.src_ip AS src_ip, Traffic.dest_ip AS dest_ip | where port_count > $$threshold$$ AND isnull(mvfind(src_ip, $$allowed_ips$$))"

[Illumio_Firewall_Tampering]
auto_summarize.dispatch.earliest_time = -1mon@h
dispatch.earliest_time = -15m
dispatch.latest_time = -5m
cron_schedule = */10 * * * *
enableSched = 1
search = | tstats values(Audit.event_type) AS event_type FROM datamodel=Illumio.Audit WHERE Audit.event_type="agent.tampering" BY _time Audit.pce_fqdn | rename Audit.pce_fqdn AS pce_fqdn

[Illumio_Check_PCE_Collector_Data]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 1
alert_condition = search count = 0
counttype = custom
cron_schedule = */5 * * * *
description = To trigger an alert if PCE data is not received in last five minutes
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","measurement{@avg}"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
enableSched = 0
search = `illumio_get_index` sourcetype="illumio:pce:collector" OR sourcetype="illumio:pce" | stats count

[Illumio_VEN_Inactivity_Timer_Alert]
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
auto_summarize.dispatch.earliest_time = -1d@h
counttype = number of events
cron_schedule = */5 * * * *
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
search = | tstats values(Audit.event_type) as event_type, values(Audit.href) as href from datamodel=Illumio.Audit WHERE Audit.event_type="agent.suspend" BY _time

[Illumio_Policy_Provisioning_Alert]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_Policy_Provisioning
dispatch.earliest_time = -2h
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" \
| eval threshold = [| stats count \
| eval count = `illumio_policy_provisioning` \
| eval percent = if(substr(count,-1)="%", "true", "False") \
| join type="left" percent [| search sourcetype="illumio:pce:metadata"  illumio_type="illumio:pce:workload" | stats latest(online_workloads) as workloads_affected \
| eval count = `illumio_policy_provisioning` \
| eval percent = if(substr(count,-1)="%", "true", "False") \
| eval threshold_perc = if(percent="true", rtrim(count,"%"), -1) | eval workloads_affected=round(workloads_affected * threshold_perc / 100) | appendcols [| stats count as workloads_affected ]] \
| appendcols [| stats count as workloads_affected ] \
    | search workloads_affected=* \
    | eval workloads_affected = if(workloads_affected < 0, `illumio_policy_provisioning`, workloads_affected) \
    | return $workloads_affected] \
| where workloads_affected_after > threshold

[Illumio_Rule_Update_Alert]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_Rule_Writing_Update
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" `illumio_rule_update`

[Illumio_PCE_Health_Alert]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_PCE_Health
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce:health" datatype="system_health" `illumio_system_health`

[Illumio_Workload_Labeling_Alert]
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Illumio_Workload_Labeling
dispatch.earliest_time = -5m@m
dispatch.latest_time = now
enableSched = 0
quantity = 0
relation = greater than
search = `illumio_get_index` sourcetype="illumio:pce" `illumio_workload_labeling`
